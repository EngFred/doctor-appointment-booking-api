generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  firstName          String         @map("first_name")
  lastName           String         @map("last_name")
  email              String         @unique
  password           String         // Hashed in application layer
  phone              String         @unique @map("phone_number") // Now required and unique
  profilePicture     String?        @map("profile_picture")
  role               Role           @default(PATIENT)
  specialty          String?        // For Doctors only
  hospitalId         String?        @map("hospital_id")
  refreshToken       String?        @map("refresh_token")
  fcmToken           String?        @map("fcm_token")

  hospital           Hospital?      @relation("DoctorHospital", fields: [hospitalId], references: [id])
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")
  payments           Payment[]      @relation("UserPayments")
  availability       Availability[] @relation("DoctorAvailability")
  notifications      Notification[] @relation("UserNotifications")
  sentMessages       Message[]      @relation("SenderMessages")
  receivedMessages   Message[]      @relation("ReceiverMessages")

  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")

  @@index([email])
  @@index([role])
  @@index([hospitalId])
  @@index([phone]) // Added for uniqueness and queries
  @@map("users")
}

model Hospital {
  id            String    @id @default(uuid())
  name          String
  address       String
  phone         String
  image         String?
  latitude      Float?
  longitude     Float?
  about         String?
  services      String[]
  field         String?
  contactPhone  String?   @map("contact_phone")
  contactEmail  String?   @map("contact_email")
  rating        Float?
  doctors       User[]    @relation("DoctorHospital")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([name])
  @@index([latitude, longitude])
  @@index([field])
  @@map("hospitals")
}

model Appointment {
  id               String           @id @default(uuid())
  patientId        String           @map("patient_id")
  doctorId         String           @map("doctor_id")
  availabilityId   String?          @unique @map("availability_id")
  paymentId        String?          @unique @map("payment_id")
  scheduledAt      DateTime         @map("scheduled_at")
  type             AppointmentType
  consultationType ConsultationType? @map("consultation_type")
  status           AppointmentStatus @default(PENDING)
  duration         Int?             // Default enforced in application layer
  location         String?
  notes            String?
  metadata         Json?
  patient          User             @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor           User             @relation("DoctorAppointments", fields: [doctorId], references: [id])
  availability     Availability?    @relation("AppointmentAvailability", fields: [availabilityId], references: [id])
  payment          Payment?         @relation("AppointmentPayment", fields: [paymentId], references: [id])
  messages         Message[]
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@index([doctorId, scheduledAt])
  @@index([patientId, status])
  @@map("appointments")
}

model Availability {
  id        String    @id @default(uuid())
  doctorId  String    @map("doctor_id")
  startTime DateTime  @map("start_time")
  endTime   DateTime  @map("end_time")
  status    AvailabilityStatus @default(AVAILABLE)
  doctor    User      @relation("DoctorAvailability", fields: [doctorId], references: [id])
  appointment Appointment? @relation("AppointmentAvailability")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([doctorId, startTime])
  @@map("availabilities")
}

model Payment {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  amount        Float
  currency      Currency  @default(UGX)
  paymentMethod PaymentMethod
  paymentType   PaymentType
  transactionId String?   @map("transaction_id")
  txRef         String?   @map("tx_ref")
  phone         String?   @map("phone_number")
  email         String?   @map("email_address") // Made optional
  status        PaymentStatus @default(PENDING)
  paymentDate   DateTime? @map("payment_date")
  user          User      @relation("UserPayments", fields: [userId], references: [id])
  appointment   Appointment? @relation("AppointmentPayment")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([userId, status])
  @@map("payments")
}

model Notification {
  id               String   @id @default(uuid())
  recipientId      String   @map("recipient_id")
  title            String
  body             String
  notificationType NotificationType
  status           NotificationStatus @default(PENDING)
  sentAt           DateTime? @map("sent_at")
  metadata         Json?
  recipient        User     @relation("UserNotifications", fields: [recipientId], references: [id])
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([recipientId, sentAt])
  @@map("notifications")
}

model Message {
  id             String         @id @default(uuid())
  senderId       String         @map("sender_id")
  receiverId     String         @map("receiver_id")
  appointmentId  String?        @map("appointment_id")
  content        String
  type           MessageType    @default(TEXT)
  status         MessageStatus  @default(SENT)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  sender         User           @relation("SenderMessages", fields: [senderId], references: [id])
  receiver       User           @relation("ReceiverMessages", fields: [receiverId], references: [id])
  appointment    Appointment?   @relation(fields: [appointmentId], references: [id])

  @@index([senderId, receiverId, createdAt])
  @@index([appointmentId])
  @@map("messages")
}

enum Role {
  PATIENT
  SUPER_ADMIN
  DOCTOR
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

enum ConsultationType {
  VIDEO
  AUDIO
  TEXT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum AvailabilityStatus {
  AVAILABLE
  BOOKED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  MTN
  AIRTEL
}

enum PaymentType {
  MOBILE_MONEY
  CARD
}

enum Currency {
  KES
  UGX
  USD
}

enum NotificationType {
  APPOINTMENT_BOOKED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_COMPLETED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}